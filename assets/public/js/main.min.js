(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dropdown = function () {
  function Dropdown(dropdownContainerClass, dropdownClass, isAccordion) {
    _classCallCheck(this, Dropdown);

    this.dropdownContainerClass = dropdownContainerClass;
    this.dropdownClass = dropdownClass;
    this.isAccordion = isAccordion;

    this.initDropdown();
  }

  _createClass(Dropdown, [{
    key: 'initDropdown',
    value: function initDropdown() {
      var _this = this;

      var dropdownContainers = document.querySelectorAll('.' + this.dropdownContainerClass);
      // let dropdowns = document.querySelectorAll(`.${this.dropdownClass}`)

      dropdownContainers.forEach(function (dropdownContainer) {

        var dropdown = dropdownContainer.querySelector('.' + _this.dropdownClass);
        _this.setAllHeights(dropdown);

        dropdownContainer.addEventListener('click', function () {

          if (_this.isAccordion) {
            dropdownContainers.forEach(function (dropdownContainerBis) {
              if (dropdownContainerBis !== dropdownContainer) {
                dropdownContainerBis.classList.add('collapsed');
              }
            });
          }

          dropdownContainer.classList.toggle('collapsed');
        });
      });
    }
  }, {
    key: 'setAllHeights',
    value: function setAllHeights(element) {
      var totalHeight = 0;
      Array.from(element.children).forEach(function (child) {
        totalHeight += child.offsetHeight;
        totalHeight += parseInt(window.getComputedStyle(child).marginTop.replace('px', ''));
        totalHeight += parseInt(window.getComputedStyle(child).marginBottom.replace('px', ''));
      });
      element.style.height = totalHeight + 'px';
    }
  }]);

  return Dropdown;
}();

module.exports = Dropdown;

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Header = function () {
  function Header(container) {
    var _this = this;

    _classCallCheck(this, Header);

    this.header = container;
    this.trigger = container.querySelector('.site-header__nav-trigger');
    this.wrapper = container.querySelector('.site-header__wrapper');

    this.trigger.addEventListener('click', function (e) {
      _this.toggleVisibility();
    });
  }

  _createClass(Header, [{
    key: 'toggleVisibility',
    value: function toggleVisibility() {
      this.wrapper.classList.toggle('site-header__wrapper--hide');
      this.trigger.classList.toggle('open');
    }
  }]);

  return Header;
}();

module.exports = Header;

},{}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MainSlider = function () {
  function MainSlider(sliderClass, slideClass, captionsClass, navigationClass, tilesClass, numberClass) {
    var _this = this;

    _classCallCheck(this, MainSlider);

    this.sliderClass = sliderClass;
    this.slideClass = slideClass;
    this.captionsClass = captionsClass;
    this.navigationClass = navigationClass;
    this.navigationButtons = document.querySelector('.' + this.navigationClass).children;
    this.tilesClass = tilesClass;
    this.numberDiv = document.querySelector('.' + numberClass);
    this.swiper;

    $(document).ready(function () {
      _this.initSwiper(_this.sliderClass);
      _this.initCaptionsSlider(document.querySelector('.' + _this.captionsClass).children);
    });
  }

  _createClass(MainSlider, [{
    key: 'initSwiper',
    value: function initSwiper(sliderClass) {
      this.swiper = new Swiper('.' + sliderClass, {
        // Optional parameters
        slideClass: this.slideClass,

        // If we need pagination
        pagination: {
          el: '.' + this.tilesClass,
          bulletClass: this.tilesClass.slice(0, -1),
          bulletActiveClass: 'active',
          clickable: true
        },

        // Navigation arrows
        navigation: {
          nextEl: this.navigationButtons[1],
          prevEl: this.navigationButtons[0],
          disabledClass: 'disable'
        }
      });
    }
  }, {
    key: 'initCaptionsSlider',
    value: function initCaptionsSlider(captions) {
      var _this2 = this;

      this.swiper.on('slideChange', function () {
        var currentIndex = _this2.swiper.realIndex;
        var lastIndex = _this2.swiper.previousIndex;
        captions[lastIndex].classList.remove('active');
        captions[currentIndex].className += ' active';
        TweenMax.fromTo(captions[lastIndex], 0.3, { autoAlpha: 1, scale: 1 }, { autoAlpha: 0, scale: 0.8, ease: Power2.easeInOut });
        TweenMax.fromTo(captions[currentIndex], 0.3, { autoAlpha: 0, scale: 0.8 }, { autoAlpha: 1, scale: 1, ease: Power2.easeInOut });

        _this2.changeNumber(currentIndex + 1);
      });
    }
  }, {
    key: 'changeNumber',
    value: function changeNumber(index) {
      this.numberDiv.innerHTML = index;
    }
  }]);

  return MainSlider;
}();

module.exports = MainSlider;

},{}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PricesFeatures = function () {
  function PricesFeatures(wrapper, featuresItem, separator, img) {
    var _this = this;

    _classCallCheck(this, PricesFeatures);

    this.wrapper = document.querySelector('.' + wrapper);
    this.trigger = this.wrapper.querySelectorAll('.features__options__title');
    this.item = this.wrapper.querySelectorAll('.' + featuresItem);
    this.separator = this.wrapper.querySelector('.' + separator);
    this.img = this.wrapper.querySelectorAll('.' + img);

    this.trigger.forEach(function (element) {
      element.addEventListener('click', function () {
        if (element.classList.contains('feature--active')) {
          return false;
        } else {
          _this.toggleVisibility();
        }
      });
    });
  }

  _createClass(PricesFeatures, [{
    key: 'toggleVisibility',
    value: function toggleVisibility() {

      // Displaying features list item
      this.item.forEach(function (element) {
        element.classList.toggle('feature--active');
      });

      // Displaying feature title
      this.trigger.forEach(function (element) {
        element.classList.toggle('feature--active');
      });

      // Animation for the separator
      this.separator.classList.toggle('separator--active');

      // Displaying images
      this.img.forEach(function (element) {
        element.classList.toggle('mockup--active');
      });
    }
  }]);

  return PricesFeatures;
}();

module.exports = PricesFeatures;

},{}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ScrollSlider = function () {
  function ScrollSlider(debug, container, sliderId, slideClass, captionsClass, duration) {
    var _this = this;

    _classCallCheck(this, ScrollSlider);

    this.debug = debug;
    this.trigger = document.querySelector('#' + container);
    this.sliderId = sliderId;
    this.slideClass = slideClass;
    this.captionsClass = captionsClass;
    this.totalDuration = duration;

    this.headerHeight;
    this.controller;
    this.scenes = [];

    if (typeof window.orientation !== 'undefined') {
      $(document).ready(function () {
        _this.trigger.className += 'mobile';

        _this.initSwiper(_this.sliderId);
        _this.initCaptionsSlider(document.querySelector('.' + _this.captionsClass).children);
      });
    } else {
      this.initScrollMagic();
    }
  }

  _createClass(ScrollSlider, [{
    key: 'initScrollMagic',
    value: function initScrollMagic() {
      this.controller = new ScrollMagic.Controller();

      this.initGlobalScene(this.controller, this.trigger, document.querySelector('#' + this.sliderId), this.totalDuration, document.querySelector('.' + this.captionsClass).children);
      this.initSlidesScenes(this.controller, this.trigger, this.totalDuration, document.querySelectorAll('.' + this.slideClass), document.querySelector('.' + this.captionsClass).children);
    }
  }, {
    key: 'initGlobalScene',
    value: function initGlobalScene(controller, trigger, pin, totalDuration, captions) {
      this.headerHeight = document.querySelector('header.site-header').offsetHeight;

      var scene = new ScrollMagic.Scene({
        triggerElement: trigger,
        duration: totalDuration,
        triggerHook: 'onLeave',
        offset: -this.headerHeight
      }).on('enter', function (event) {
        captions[0].classList.remove('stay-active');
        captions[captions.length - 1].classList.remove('stay-active');
      }).on('leave', function (event) {
        if (event.state == 'BEFORE') {
          captions[0].className += ' stay-active';
        } else if (event.state == 'AFTER') {
          captions[captions.length - 1].className += ' stay-active';
        }
      }).setPin(pin);

      if (this.debug) {
        scene.addIndicators({ name: 'scene global' });
      }

      scene.addTo(controller);
      this.scenes.push(scene);
    }
  }, {
    key: 'initSlidesScenes',
    value: function initSlidesScenes(controller, trigger, totalDuration, slides, captions) {
      var _this2 = this;

      var duration = totalDuration / (slides.length - 1);
      slides.forEach(function (slide, index) {

        if (index !== 0) {
          var timeline = new TimelineMax();
          var tween = TweenMax.to(slide, 1, { className: "+=active", ease: Power3.easeIn });

          timeline.add(tween, 0);

          if (slides[index - 1]) {
            var tween2 = void 0;
            if (slide !== slides[slides.length]) {
              tween2 = TweenMax.to(slides[index - 1], 1, { className: "+=left", ease: Power1.easeOut });
            } else {
              tween2 = TweenMax.to(slides[index - 1], 1, { className: "+=left", ease: Power3.easeOut });
            }

            timeline.add(tween2, 0);
          }

          if (slides[index + 2]) {
            var tween3 = TweenMax.to(slides[index + 2], 1, { className: "-=left", ease: Power3.easeIn });

            timeline.add(tween3, 0);
          }

          var scene = new ScrollMagic.Scene({
            triggerElement: trigger,
            duration: duration,
            triggerHook: 'onLeave',
            offset: (index - 1) * duration - _this2.headerHeight
          }).on('enter', function (event) {}).on('leave', function (event) {
            if (event.scrollDirection == 'FORWARD') {
              captions[index].classList.add('active');
              captions[index - 1].classList.remove('active');
            } else {
              captions[index - 1].classList.add('active');
              captions[index].classList.remove('active');
            }
          }).setTween(timeline);

          if (_this2.debug) {
            scene.addIndicators({ name: 'scene ' + index });
          }

          scene.addTo(controller);
          _this2.scenes.push(scene);
        }
      });
    }
  }, {
    key: 'initSwiper',
    value: function initSwiper(sliderId) {
      this.swiper = new Swiper('#' + sliderId, {
        // Optional parameters
        slideClass: this.slideClass,
        slideActiveClass: 'active',
        slidesPerView: 'auto',
        //centeredSlides: true,
        spaceBetween: 25,

        scrollbar: {
          el: '.slideScroll__scrollbar',
          hide: false
        }
      });
    }
  }, {
    key: 'initCaptionsSlider',
    value: function initCaptionsSlider(captions) {
      var _this3 = this;

      this.swiper.on('slideChange', function () {
        var currentIndex = _this3.swiper.realIndex;
        var lastIndex = _this3.swiper.previousIndex;
        captions[lastIndex].classList.remove('active');
        captions[currentIndex].className += ' active';
        // TweenMax.fromTo(captions[lastIndex], 0.3, {autoAlpha: 1, scale: 1}, {autoAlpha: 0, scale: 0.8, ease: Power2.easeInOut});
        // TweenMax.fromTo(captions[currentIndex], 0.3, {autoAlpha: 0, scale: 0.8}, {autoAlpha: 1, scale: 1, ease: Power2.easeInOut});
      });
    }
  }]);

  return ScrollSlider;
}();

module.exports = ScrollSlider;

},{}],6:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SimpleSlider = function () {
  function SimpleSlider(sliderClass, slideClass, captionsClass, tilesClass) {
    var _this = this;

    _classCallCheck(this, SimpleSlider);

    this.sliderClass = sliderClass;
    this.slideClass = slideClass;
    this.captionsClass = captionsClass;
    this.tilesClass = tilesClass;
    this.swiper;
    this.lastIndex = 0;

    $(document).ready(function () {
      _this.initSwiper(_this.sliderClass);
      _this.initCaptionsSlider(document.querySelector('.' + _this.captionsClass).children);
    });
  }

  _createClass(SimpleSlider, [{
    key: 'initSwiper',
    value: function initSwiper(sliderClass) {
      this.swiper = new Swiper('.' + sliderClass, {
        // Optional parameters
        loop: true,
        slideClass: this.slideClass,

        // If we need pagination
        pagination: {
          el: '.' + this.tilesClass,
          bulletClass: this.tilesClass.slice(0, -1),
          bulletActiveClass: 'active',
          clickable: true
        },

        autoplay: {
          delay: 4000,
          disableOnInteraction: false
        },

        simulateTouch: false
      });
    }
  }, {
    key: 'initCaptionsSlider',
    value: function initCaptionsSlider(captions) {
      var _this2 = this;

      this.swiper.on('slideChange', function () {
        var currentIndex = _this2.swiper.realIndex;
        if (currentIndex != _this2.lastIndex) {
          captions[_this2.lastIndex].classList.remove('active');
          captions[currentIndex].className += ' active';
          TweenMax.fromTo(captions[_this2.lastIndex], 0.3, { autoAlpha: 1, scale: 1, y: '0' }, { autoAlpha: 0, scale: 0.8, y: '+=50', ease: Power2.easeInOut });
          TweenMax.fromTo(captions[currentIndex], 0.3, { autoAlpha: 0, scale: 0.8, y: '+=50' }, { autoAlpha: 1, scale: 1, y: '0', ease: Power2.easeInOut });
          _this2.lastIndex = currentIndex;
        }
      });
    }
  }]);

  return SimpleSlider;
}();

module.exports = SimpleSlider;

},{}],7:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SocialShare = function () {
  function SocialShare(wrapper, socialNav) {
    _classCallCheck(this, SocialShare);

    this.wrapper = document.querySelector('.' + wrapper);
    this.socialNav = document.querySelector('.' + socialNav);
    this.totalDuration = this.wrapper.offsetHeight - this.socialNav.offsetHeight;

    this.controller;
    this.scenes = [];
    this.debug = false;

    this.initScrollMagic();
  }

  _createClass(SocialShare, [{
    key: 'initScrollMagic',
    value: function initScrollMagic() {
      this.controller = new ScrollMagic.Controller();

      this.initScene(this.wrapper, this.socialNav, this.totalDuration);
    }
  }, {
    key: 'initScene',
    value: function initScene(trigger, pin, totalDuration) {
      this.headerHeight = document.querySelector('header.site-header').offsetHeight;

      var scene = new ScrollMagic.Scene({
        triggerElement: trigger,
        duration: totalDuration,
        triggerHook: 'onLeave',
        offset: -this.headerHeight - 45
      }).setPin(pin);

      if (this.debug) {
        scene.addIndicators({ name: 'scene global' });
      }

      scene.addTo(this.controller);
      this.scenes.push(scene);
    }
  }]);

  return SocialShare;
}();

module.exports = SocialShare;

},{}],8:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextSlider = function () {
  function TextSlider(textSliderClass, captionSliderClass) {
    _classCallCheck(this, TextSlider);

    this.textSliderClass = textSliderClass;
    this.captionSliderClass = captionSliderClass;
    this.timeline;
    this.duration = .3;
    this.delay = 8;
    this.currentIndex = 0;

    this.resizeParents();
    this.initTimeline();
    this.initSlider(document.querySelector('.' + this.textSliderClass).children);
  }

  _createClass(TextSlider, [{
    key: 'initSlider',
    value: function initSlider(textSlides) {
      var _this = this;

      this.timeline.add(TweenMax.staggerTo(textSlides, this.duration, {
        css: { className: '+=active' },
        ease: Circ.easeInOut,
        onComplete: function onComplete() {
          _this.showCaptionsSlider(document.querySelector('.' + _this.captionSliderClass).children);
        }
      }, this.delay)).add(TweenMax.staggerTo(textSlides, this.duration, {
        delay: this.duration,
        css: { className: '+=leave' },
        ease: Circ.easeInOut,
        onComplete: function onComplete() {
          _this.hideCaptionsSlider(document.querySelector('.' + _this.captionSliderClass).children);
        }
      }, this.delay), this.delay - 1);
    }
  }, {
    key: 'initTimeline',
    value: function initTimeline() {
      var _this2 = this;

      this.timeline = new TimelineLite({
        onComplete: function onComplete() {
          setTimeout(function () {
            _this2.timeline.restart();
          }, _this2.duration);
        }
      });
    }
  }, {
    key: 'showCaptionsSlider',
    value: function showCaptionsSlider(captions) {
      captions[this.currentIndex].className += ' active';
      TweenMax.fromTo(captions[this.currentIndex], 0.3, { autoAlpha: 0, scale: 0.8, y: '50' }, { autoAlpha: 1, scale: 1, y: '0', ease: Power2.easeInOut });
    }
  }, {
    key: 'hideCaptionsSlider',
    value: function hideCaptionsSlider(captions) {
      captions[this.currentIndex].classList.remove('active');
      TweenMax.fromTo(captions[this.currentIndex], 0.3, { autoAlpha: 1, scale: 1, y: '0' }, { autoAlpha: 0, scale: 0.8, y: '-50', ease: Power2.easeInOut });
      this.incrementIndex();
    }
  }, {
    key: 'incrementIndex',
    value: function incrementIndex() {
      this.currentIndex = (this.currentIndex + 1) % document.querySelector('.' + this.captionSliderClass).children.length;
    }
  }, {
    key: 'resizeParents',
    value: function resizeParents() {
      document.querySelector('.' + this.textSliderClass).style.minWidth = this.getMaxWidthChildren('.' + this.textSliderClass) + 'px';
      document.querySelector('.' + this.textSliderClass).style.minHeight = this.getMaxHeightChildren('.' + this.textSliderClass) + 'px';
      document.querySelector('.' + this.captionSliderClass).style.minHeight = this.getMaxHeightChildren('.' + this.captionSliderClass) + 'px';
    }
  }, {
    key: 'getMaxWidthChildren',
    value: function getMaxWidthChildren(parentClass) {
      return Math.max.apply(Math, $(parentClass).children().map(function () {
        return $(this).outerWidth();
      }).get());
    }
  }, {
    key: 'getMaxHeightChildren',
    value: function getMaxHeightChildren(parentClass) {
      return Math.max.apply(Math, $(parentClass).children().map(function () {
        return $(this).outerHeight();
      }).get());
    }
  }]);

  return TextSlider;
}();

module.exports = TextSlider;

},{}],9:[function(require,module,exports){
'use strict';

// COOKIE BANNER
function startGoogleAnalytics() {
  (function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
      (i[r].q = i[r].q || []).push(arguments);
    }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
  })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

  ga('create', 'UA-127419578-1', 'auto');
  ga('send', 'pageview');
}

var cookieBanner = document.getElementById('cookie-banner');
var cookieInformAndAsk = document.getElementById('cookie-inform-and-ask');
var cookieMoreButton = document.getElementById('cookie-more-button');
var gaCancelButton = document.getElementById('ga-cancel-button');
var gaConfirmButton = document.getElementById('ga-confirm-button');

var GA_PROPERTY = 'UA-127419578-1';
var GA_COOKIE_NAMES = ['__utma', '__utmb', '__utmc', '__utmz', '_ga', '_gat'];

processCookieConsent();
function processCookieConsent() {
  // 1. On récupère l'éventuel cookie indiquant le choix passé de l'utilisateur
  var consentCookie = Cookies.getJSON('hasConsent');
  // 2. On récupère la valeur "doNotTrack" du navigateur
  var doNotTrack = navigator.doNotTrack || navigator.msDoNotTrack;

  // 3. Si le cookie existe et qu'il vaut explicitement "false" ou que le "doNotTrack" est défini à "OUI"
  //    l'utilisateur s'oppose à l'utilisation des cookies. On exécute une fonction spécifique pour ce cas.
  if (doNotTrack === 'yes' || doNotTrack === '1' || consentCookie === false) {
    reject();
    return;
  }

  // 4. Si le cookie existe et qu'il vaut explicitement "true", on démarre juste Google Analytics
  if (consentCookie === true) {
    startGoogleAnalytics();
    return;
  }

  // 5. Si le cookie n'existe pas et que le "doNotTrack" est défini à "NON", on crée le cookie "hasConsent" avec pour
  //    valeur "true" pour une durée de 13 mois (la durée maximum autorisée) puis on démarre Google Analytics
  if (doNotTrack === 'no' || doNotTrack === '0') {
    Cookies.set('hasConsent', true, { expires: 395 });
    startGoogleAnalytics();
    return;
  }

  // 6. Si le cookie n'existe pas et que le "doNotTrack" n'est pas défini, alors on affiche le bandeau et on crée les listeners
  cookieBanner.classList.add('active');
  cookieMoreButton.addEventListener('click', onMoreButtonClick, false);
  document.addEventListener('click', onDocumentClick, false);
}

function reject() {
  // création du cookie spécifique empêchant Google Analytics de démarrer
  Cookies.set('ga-disable-' + GA_PROPERTY, true, { expires: 395 });
  // insertion de cette valeur dans l'objet window
  window['ga-disable-' + GA_PROPERTY] = true;

  // création du cookie précisant le choix utilisateur
  Cookies.set('hasConsent', false, { expires: 395 });

  // suppression de tous les cookies précédemment créés par Google Analytics
  GA_COOKIE_NAMES.forEach(function (cookieName) {
    return Cookies.remove(cookieName);
  });
}

function onDocumentClick(event) {
  var target = event.target;

  // Si l'utilisateur a cliqué sur le bandeau ou le bouton dans ce dernier alors on ne fait rien.
  if (target.id === 'cookie-banner' || target.parentNode.id === 'cookie-banner' || target.parentNode.parentNode.id === 'cookie-banner' || target.id === 'cookie-more-button') {
    return;
  }

  event.preventDefault();

  // On crée le cookie signifiant le consentement de l'utilisateur et on démarre Google Analytics
  Cookies.set('hasConsent', true, { expires: 365 });
  startGoogleAnalytics();

  // On cache le bandeau
  cookieBanner.className = cookieBanner.className.replace('active', '').trim();

  // On supprime le listener sur la page et celui sur le bouton du bandeau
  document.removeEventListener('click', onDocumentClick, false);
  cookieMoreButton.removeEventListener('click', onMoreButtonClick, false);
}

function onMoreButtonClick(event) {
  event.preventDefault();

  // On affiche la boîte de dialogue permettant à l'utilisateur de faire son choix
  cookieInformAndAsk.classList.add('active');

  // On cache le bandeau
  cookieBanner.className = cookieBanner.className.replace('active', '').trim();

  // On crée les listeners sur les boutons de la boîte de dialogue
  gaCancelButton.addEventListener('click', onGaCancelButtonClick, false);
  gaConfirmButton.addEventListener('click', onGaConfirmButtonClick, false);

  // On supprime le listener sur la page et celui sur le bouton du bandeau
  document.removeEventListener('click', onDocumentClick, false);
  cookieMoreButton.removeEventListener('click', onMoreButtonClick, false);
}

function onGaConfirmButtonClick(event) {
  event.preventDefault();

  // On crée le cookie signifiant le consentement de l'utilisateur et on démarre Google Analytics
  Cookies.set('hasConsent', true, { expires: 365 });
  startGoogleAnalytics();

  // On cache la boîte de dialogue
  cookieInformAndAsk.className = cookieBanner.className.replace('active', '').trim();

  // On supprime les listeners sur les boutons de la boîte de dialogue
  gaCancelButton.removeEventListener('click', onGaCancelButtonClick, false);
  gaConfirmButton.removeEventListener('click', onGaConfirmButtonClick, false);
}

function onGaCancelButtonClick(event) {
  event.preventDefault();

  // On lance la procédure de refus de l'utilisation des cookies
  reject();

  // On cache la boîte de dialogue
  cookieInformAndAsk.className = cookieBanner.className.replace('active', '').trim();

  // On supprime les listeners sur les boutons de la boîte de dialogue
  gaCancelButton.removeEventListener('click', onGaCancelButtonClick, false);
  gaConfirmButton.removeEventListener('click', onGaConfirmButtonClick, false);
}

},{}],10:[function(require,module,exports){
'use strict';

$(document).ready(function () {
  if (document.querySelector('.newsletter')) {
    var $form = $('.newsletter');
    if ($form.length > 0) {
      var button = $('form input[type="submit"]');
      button.bind('click', function (event) {
        if (event) event.preventDefault();
        register($form, $(this));
      });
    }
  }
});

function register(form, button) {
  button.val('En cours d\'envoi...');
  $.ajax({
    type: form.attr('method'),
    url: form.attr('action'),
    data: form.serialize(),
    cache: false,
    dataType: 'json',
    contentType: 'application/json; charset=utf-8',
    error: function error(err) {
      // Error
      // console.log(err)
      button.parents('.newsletter__form')[0].querySelector('.newsletter__message').innerHTML = 'Une erreur est survenue, veuillez réessayer plus tard ou nous contacter.';
    },
    success: function success(data) {
      button.val('Confirmer');
      if (data.result === 'success') {
        // Success
        button.parents('.newsletter__form')[0].querySelector('.newsletter__message').innerHTML = 'Vous êtes désormais abonné à notre newsletter.';
      } else {
        // Error
        // console.log(data.msg)
        button.parents('.newsletter__form')[0].querySelector('.newsletter__message').innerHTML = 'Une erreur est survenue, veuillez réessayer plus tard ou nous contacter.';
      }
    }
  });
}

},{}],11:[function(require,module,exports){
'use strict';

require('./inc/mailchimp-registration');

require('./inc/cookie-banner');

var _Header = require('./Classes/Header');

var _Header2 = _interopRequireDefault(_Header);

var _ScrollSlider = require('./Classes/ScrollSlider');

var _ScrollSlider2 = _interopRequireDefault(_ScrollSlider);

var _SimpleSlider = require('./Classes/SimpleSlider');

var _SimpleSlider2 = _interopRequireDefault(_SimpleSlider);

var _MainSlider = require('./Classes/MainSlider');

var _MainSlider2 = _interopRequireDefault(_MainSlider);

var _TextSlider = require('./Classes/TextSlider');

var _TextSlider2 = _interopRequireDefault(_TextSlider);

var _Dropdown = require('./Classes/Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _SocialShare = require('./Classes/SocialShare');

var _SocialShare2 = _interopRequireDefault(_SocialShare);

var _PricesFeatures = require('./Classes/PricesFeatures');

var _PricesFeatures2 = _interopRequireDefault(_PricesFeatures);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Classes
// Include
if (document.querySelector('.site-header')) {
  var header = new _Header2.default(document.querySelector('.site-header'));
}

if (document.querySelector('#slideScroll__wrapper')) {
  var scrollSlider = new _ScrollSlider2.default(false, 'slideScroll__wrapper', 'slideScroll', 'slideScroll__slide', 'slideScroll__captions', 4500);
}

if (document.querySelector('.simpleSlider__wrapper')) {

  var simpleSlider = new _SimpleSlider2.default('simpleSlider', 'pictureSlider__slide', 'captionSlider__slides', 'captionSlider__tiles');
}

if (document.querySelector('.mainSlider__wrapper')) {

  var mainSlider = new _MainSlider2.default('phoneSlider', 'phoneSlider__slide', 'phoneSlider__captions', 'mainSlider__arrows', 'tileSlider', 'mainSlider__numbers');
}

if (document.querySelector('.textSlider__wrapper')) {

  var textSlider = new _TextSlider2.default('textSlider__slides', 'textSlider__captions');
}

if (document.querySelector('.subscription-info__shopping-cart__dropdown')) {

  var shopping_cart_dropdown = new _Dropdown2.default('dropdown-container', 'dropdown-list', false);
}

if (document.querySelector('.article')) {

  var socialShare = new _SocialShare2.default('article__content', 'social-share__content', 'article__next');
}

if (document.querySelector('.prices__features__wrapper')) {

  var pricesFeatures = new _PricesFeatures2.default('prices__features__wrapper', 'features--premium', 'features__options__separator', 'features__mockup__img');
}

if (document.querySelector('.prices__faq')) {

  var pricesFaq = new _Dropdown2.default('dropdown-container', 'dropdown-list', true);
}

if (document.querySelector('.faq')) {

  var _pricesFaq = new _Dropdown2.default('dropdown-container', 'dropdown-list', false);
}

},{"./Classes/Dropdown":1,"./Classes/Header":2,"./Classes/MainSlider":3,"./Classes/PricesFeatures":4,"./Classes/ScrollSlider":5,"./Classes/SimpleSlider":6,"./Classes/SocialShare":7,"./Classes/TextSlider":8,"./inc/cookie-banner":9,"./inc/mailchimp-registration":10}]},{},[11])


//# sourceMappingURL=data:application/json;charset=utf8;base64,
